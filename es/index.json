[{"content":"Desde hace un par de años, a medida que he tenido la oportunidad de liderar equipos en proyectos y situaciones más complejas e inciertas, me ha picado la curiosidad por entender más sobre management de ingeniería y liderazgo técnico. Por eso he leído 3 libros hasta el momento: The Manager\u0026rsquo;s Path , de Camille Fournier, y An Elegant Puzzle y Staff Engineer de Will Larson.\nRecomiendo muchísimo leerlos, aún si no estás interesado en convertirte en manager (por mi parte también siento que me falta mucho por aprender en el lado técnico): aprender sobre management me ha ayudado a entender mejor qué debo esperar de mis managers y qué esperan ellos de mí, y también he aprendido muchos tips de liderazgo que se pueden aplicar en general.\nSin embargo, me parece que estos libros hablan sobre el progreso en la carrera en situaciones más o menos ideales. En mi experiencia, estos escenarios perfectos que asumen implícitamente (organizaciones racionales y 100% transparentes, personas razonables, no egoístas y totalmente alineadas con la visión de la empresa, recompensas seguras por hacer bien el trabajo, etc.) no son tan comunes. Ciertamente, navegar una organización ejemplar sería muy fácil, pero la realidad es que las empresas tienen falencias que pueden estancar nuestro progreso seriamente.\nLas únicas fuentes que he visto que se enfocan en los intereses individuales de una ingeniera, admitiendo que el contexto organizacional puede estar lejos de ser perfecto son\n Know How Your Org Works , de Cindy Sridharan, Being Glue de Tanya Reilly.  Son también las únicas fuentes entre las que he visto cuyas autoras no eran managers al momento de escribirlas.1\nNo hablo de situaciones \u0026ldquo;sencillas\u0026rdquo; de manejar, tales como malentendidos particulares, coyunturas temporales (como la renuncia de tu manager), o problemas obvios (como que un colega te haga bullying) sino de patrones sistemáticos que, a menos que se identifiquen rápido, te pueden poner en una posición desventajosa de la cual es muy difícil salir. Es esta dificultad para navegarlos y encontrar una salida la razón por la que me refiero a estos estados como \u0026ldquo;pantanos\u0026rdquo;.\nEstos son patrones que he identificado a lo largo de mi carrera que han hecho que yo, u otras personas de otros equipos, entren en un pantano. Algunos los he vivido, y otros los he observado desde una distancia segura.\nAntes de pasar a hablar de ellos, quiero aclarar que la mayoría de las soluciones que propongo son de caracter individualista. Es decir, son algunas cosas que puedes hacer tú si te encuentras en una situación parecida. Claramente, una solución a nivel organizacional sería ideal, pero una organización puede tomar años en cambiar, por lo que hay que pensar bien si ese es el camino que se quiere tomar.\nTambién quiero aclarar que en general, estas situaciones no suceden como parte de una estratagema compleja planeada por años para dañar tu carrera. A veces solo se trata de una cuestión de incentivos y cómo una organización o un equipo responden a ellos. A veces son causadas por la inexperiencia de un líder, y tú solo eres daño colateral. La razón por la que quiero hablar de estos patrones es para ayudarte a identificarlos antes de que tu carrera se vea afectada por ellos.\n Andrew Maclean, Head Lopper #1\n Distribución desequilibrada de equipos En este patrón hay al menos 2 grupos de personas en un mismo equipo que comparten responsabilidades operativas con una diferencia horaria importante (al menos ~6 hrs). Si uno de los grupos tiene menos miembros, la carga operativa en ese grupo va a ser mayor por persona, afectando negativamente su productividad y sus oportunidades de progresar en la empresa.\nDigamos que hay un equipo con 8 personas en América, y 4 personas en Europa, encargados de desarrollar y soportar una aplicación web. A cada persona le corresponde una semana de on-call (guardia) primario, y una de secundario inmediatamente luego. Los turnos de on-call duran 12 horas, y el turno de on-call de las personas en Europa inicia cuando termina el de las de América. A simple vista, éste parece ser un acuerdo justo, no?\nCon estas condiciones, las personas en América tendrían una semana de on-call primario, una de on-call secundario, y luego 6 semanas para trabajar en funcionalidades y mejoras (ojalá) sin distracciones.\nPor otro lado, el equipo en Europa pasaría 2 semanas on-call y 2 semanas trabajando en mejoras. Esto significa que el 50% de su tiempo lo pasan dando soporte, comparado con 25% para las personas en América!\nPara un manager, esto se ve como una mejora del 25% en productividad en el equipo de América. Por lo tanto, es probable que las personas en ese equipo avancen hacia ascensos y puestos de liderazgo mucho más rápido. A su vez, dado que son más productivos, los managers empezarán a entregarle más responsabilidades a estos líderes, quienes seguro querrán que sus equipos crezcan, posiblemente exacerbando el problema si contratan más personas en su zona horaria.\nPor su lado, las personas en Europa entrarán en un pantano. Dada su menor productividad, los managers le asignarán a sus miembros proyectos de menor impacto y alcance, lo cuál hará más difícil justificar un ascenso o aumento. La moral del equipo tenderá a disminuir también, afectando aún más la productividad.\nLa situación puede empeorar con otros factores, tales como\n Concentración de trabajo reactivo en una zona horaria: En el ejemplo de arriba, se asume que ambos equipos tienen la misma carga mientras están on-call. Sin embargo, podría pasar que la mayoría de usuarios estén en Europa, de modo que que los turnos de soporte de América (que suceden durante tarde/ noche en Europa) sean tranquilos y permitan que aún durante sus turnos de on-call, el equipo pueda seguir trabajando en funcionalidades e iniciativas nuevas. Burnout: Dependiendo de la frecuencia de la rotación, en casos extremos como el del equipo de Europa, puede que el tiempo transcurrido entre semanas de on-call no sea suficiente para que el equipo se recupere del cansancio físico y mental que puede suponer estar en guardia por 12 horas o más durante 2 semanas, haciendo que la moral y la productividad bajen cada vez más rápido. Ubicación: Si la empresa tiene oficinas, y el equipo más pequeño es remoto, sus oportunidades de alcanzar y seguir el ritmo del otro equipo serían aún menores, puesto que la comunicación asíncrona tiende a tener un ancho de banda mucho menor.  Señales de alerta  Crecimiento desproporcionado en un continente diferente al tuyo; o, si vas a entrar a la empresa, presencia desproporcionada (en términos de número de empleados), en otro continente.  Solución Primero hay que entender la fuente del desequilibrio. Puede que el equipo de liderazgo no tenga mucha experiencia, pero también puede que se trate de una situación transitoria; si por ejemplo la empresa se está expandiendo a otros continentes, se esperaría que el equipo más pequeño siga creciendo, eventualmente zanjando la brecha.\nResolver una distribución desequilibrada de equipos requiere del apoyo de managers y directores, y probablemente de VPs (dependiendo del tamaño de la empresa). En caso de que ya haya un desequilibrio, se debe limitar la contratación al continente con el equipo más pequeño. Si no, se debe tratar de mantener un factor de miembros en cada continente de 1:1 a medida que se contratan más personas. Conseguir el apoyo de líderes puede ser difícil si éstos se encuentran en el mismo continente del grupo con más integrantes, pues es probable que allí esté su red profesional. Para ganar ese apoyo, es necesario mostrarle a tu manager datos claros sobre cómo la distribución del equipo está afectando tu productividad, pero también las iniciativas que vas a trabajar cuando se solucione - es de bastante ayuda mostrar que ya tienes planeado invertir bien el tiempo que recuperarás.\nSi encuentras demasiada fricción, puede que simplemente tu equipo no sea una prioridad para la estrategia de la empresa, o que se vea como un equipo 100% de soporte. Si crees que ese puede ser el caso, corrobóralo y considera la opción de buscar trabajo en otro lugar, o pedir una reubicación.\nEl equipo de limpieza El equipo de limpieza surge cuando la organización recompensa mucho más el lanzamiento de nuevos proyectos o funcionalidades que su estabilidad. Esto lleva a que las personas que hayan entregado algo rápido sin terminarlo del todo se asignen a nuevas iniciativas, las cuales entregan rápido, repitiendo el ciclo, mientras que otro grupo de personas - el equipo de limpieza - es asignado a mantener o terminar el trabajo que estos primeros dejan. Dados los incentivos de la organización (más cosas nuevas es mejor), el primer grupo será recompensado mientras que el segundo tendrá peores evaluaciones y cada vez menos acceso a nuevas oportunidades.\nEn mi experiencia, en una organización saludable cada líder se enfoca en un proyecto o área de los cuales son responsables, y siguen trabajando por meses o incluso años en mejorarlos. Este enfoque prolongado en un área hace posible que nos hagamos cargo personalmente de las consecuencias de nuestras decisiones. Además, dado que un líder está ocupado con un área específica, se crean oportunidades para que otras personas desarrollen nuevas iniciativas por fuera de ella y crezcan también.\nIt was really valuable for me to stay at a single company long enough to live with the consequences of my own engineering decisions. To come face-to-face with my own technical debt.\nIt takes a few years for this to play out but IMO it\u0026#39;s an important part of engineering growth.\n\u0026mdash; Charlie Marsh (@charliermarsh) January 11, 2025   Este tweet de Charlie Marsh encapsula bien lo que quiero decir, cambiando \u0026ldquo;company\u0026rdquo; por \u0026ldquo;area\u0026rdquo;.\n Sin embargo, he visto como algunos managers desarrollan una predilección por ciertas personas talentosas, a quienes mueven impacientemente de un proyecto a otro, a veces sin que éstos estén completos. Las consecuencias de ésto son en general positivas para dichas personas, dado que en cierto modo están acumulando logros que luego pueden llevar a aumentos o ascensos. Sin embargo, a su paso van dejando sistemas incompletos de los que otras personas deben hacerse cargo. Este último grupo de personas se convierte en un \u0026ldquo;equipo de limpieza\u0026rdquo;,encargado de estabilizar y mantener los proyectos que quedan empezados, a tal punto que esta se vuelve su responsabilidad. En este caso, el pantano se crea por la cantidad de trabajo que supone hacerse cargo de dichos proyectos, al punto que el equipo de limpieza se queda sin capacidad para trabajar en iniciativas propias.\nEl equipo de limpieza enfrenta entonces un dilema incómodo: si eligen no mantener o terminar estos proyectos, pueden ir dañando la relación con su manager poco a poco; pero si aceptan, sacrifican sus propias iniciativas por trabajar en las de otros, y puede que les toque responder por las malas decisiones pasadas de otra persona. Aceptar puede también llevar a otros problemas, como convertirse en el camino de menor resistencia (descrito más adelante).\nEste patrón se perpetúa si la empresa recompensa más el comienzo de nuevos proyectos que los esfuerzos de estabilización. Si en algún momento hay algún problema con los proyectos que van dejando a su paso, es probable que por el tiempo transcurrido nadie recuerde las circunstancias iniciales, y se le achaquen las fallas a las personas que estén a cargo del sistema o componente en ese momento. Desde el punto de vista de un director o un VP, parecerá que el manager y su ingeniero líder llevan una racha increíble, y que el resto de personas tiene un rendimiento menor.\n   Steve Jobs on living with the consequences of your choices.\n Señales de alerta  Los proyectos nuevos siempre son asignados o tomados por un par de personas. Experimentas mucha resistencia por parte de tu manager cuando propones iniciativas en las que quieres trabajar. Tú u otras personas reciben muchas solicitudes para mantener sistemas en cuya construcción no estuvieron involucrados. Las evaluaciones de rendimiento revelan un SOS (Shiny Object Syndrome , por sus siglas en inglés), recompensando mucho más features y proyectos nuevos sobre esfuerzos de estabilización de sistemas existentes.  Solución Como en todos los casos, el primer paso debe ser hablarlo con tu manager. Muéstrale las ocasiones en las cuales tu rango de oportunidades se vio limitado por tener que trabajar completando trabajo ajeno. Puede que tu manager no tenga mucha experiencia y haya generado un \u0026ldquo;equipo de limpieza\u0026rdquo; no por mala fé, sino por no haber identificado las consecuencias de segundo orden que se desprenden de sus decisiones. Si es una persona razonable y tu evidencia es concreta, seguro reaccionará.\nSi no lo hace, la desobediencia puede funcionar. Por ejemplo, si hay un proyecto en el que quieres trabajar, pero no puedes porque tu backlog está lleno, o tu manager se rehúsa a que cambies tus prioridades, puedes elegir trabajar en él independientemente. Es una estrategia arriesgada, ya que igual debes entregar el resto del trabajo, por lo que probablemente tendrás que trabajar en el proyecto en tu tiempo libre. Además, no tienes ningún tipo de garantía de que recibirás algún tipo de recompensa a su término. Habiendo dicho eso, he visto que esta estrategia ha funcionado bastante bien. Si no descuidas tu trabajo actual y tu proyecto es de alto impacto, tu empresa y tu manager no podrán simplemente ignorarlo.\nPor último, la mejor solución es la prevención. Establecer límites claros para tu trabajo puede ser difícil (sobre todo si eres nuevo en un equipo y quieres agradarle a la mayoría de personas), pero te puede ayudar mucho en el largo plazo.\nEl camino de menor resistencia El sentido del deber de algunos ingenieros, o la falta de asertividad en su comunicación, los puede llevar a siempre aceptar peticiones para trabajar en tareas que el resto del equipo desdeña, pero que son de vital importancia, como entrevistas, actualizaciones de componentes, la solución de problemas en sistemas críticos, entre otras. Si la organización no recompensa este trabajo o no sabe evaluarlo, esto puede crear un ciclo donde la mayoría del tiempo de un ingeniero sea ocupado por tareas que no le ayuden a mejorar su posición, a pesar de que sus esfuerzos multiplican la productividad del resto del equipo.\nEn mi opinión, los mejores ingenieros son quienes no se preocupan por qué tan glamuroso es el trabajo. Si hay algo que debe hacerse, se debe hacer y punto. No importa si se trata de arreglar el sistema de entrega continua para desbloquear un despliegue, o de implementar una nueva arquitectura. Son personas en las que el equipo y la organización pueden confiar.\nPor esto mismo, se pueden convertir en el camino de menor resistencia para su manager o su equipo. Por su altruismo son propensos a aceptar realizar el trabajo que nadie quiere hacer, solo por su fuerte sentido de deber. En una organización saludable, este tipo de trabajo es recompensado (siempre y cuando su impacto sea real), y en muchas organizaciones incluso se espera que sean los ingenieros en un nivel senior o superior quienes se encarguen de él directamente, o al menos de coordinarlo. Will Larson describe esto en más detalle en Staff Engineer.\nEl problema aparece cuando el sistema de evaluación del rendimiento no está diseñado para tomar en cuenta este trabajo \u0026ldquo;de soldadura\u0026rdquo; (glue work2) por Tanya Reilly. La metáfora viene de que - tal como la soldadura o el pegamento - este trabajo no es inmediatamente visible a pesar de que juega un papel crítico en mantener la estructura y los procesos de la empresa o equipo. Cualquier organización siempre tendrá montones de \u0026ldquo;piezas por soldar\u0026rdquo;: migraciones, actualizaciones, entrevistas, revisiones de código, documentos de diseño, reuniones de planeación, etc. Si una organización valora un conjunto de actividades totalmente diferentes, y tú estás haciendo el trabajo de soldadura que todos evitan, puedes arriesgarte a terminar en un pantano.\nPoco a poco las personas asociarán cierto tipo de tareas contigo, y te las delegarán directa o indirectamente. Esto no lo harán necesariamente con malas intenciones - simplemente tú eres el camino de menor resistencia, lo cual ha creado sesgos en su forma de pensar.\nSeñales de alerta  Muchas personas - incluyendo tu manager - constantemente redirigen trabajo o preguntas hacia ti sobre áreas o temas que son \u0026ldquo;de bien común\u0026rdquo;, de las cuales más de una persona debería estar a cargo. Te asignan tareas de ciertas categorías solo a ti, a pesar de que hay otras personas en total capacidad de hacerlas. Por ejemplo, entrevistas, trabajos operativos como actualizaciones de componentes, arreglos en el sistema de CI/CD. El trabajo de soldadura que hiciste en el último año o semestre no tuvo un impacto positivo en tu evaluación de rendimiento pasada.  Solución Lo primero que debes probar es decir \u0026ldquo;no\u0026rdquo;. Puede que te hayas vuelto un experto en soldar, y que una tarea que a ti te llevaría 5 minutos a otro le tome 1 hora, pero es necesario que empieces a rechazar peticiones para hacer más.\nDependiendo de qué tan \u0026ldquo;espeso\u0026rdquo; sea el pantano en el que te encuentres, puede ser más difícil, pues entre más grande sea el sesgo en las personas que te rodean, tendrás que responder \u0026ldquo;no\u0026rdquo; más veces. Esto puede ser desgastante, pero hay que restablecer las expectativas que tiene tu equipo de ti. Además, negarte a trabajar en tareas en las cuales te han encasillado crea oportunidades para redistribuir ese conocimiento y experiencia. A tu manager seguro le gustará reducir el bus factor del equipo.\nDocumenta todo lo que sepas sobre las tareas que quieres redistribuir en tu equipo, y anúncialo en un canal público (email o Slack). Ten en cuenta que el cambio no será inmediato; si te hacen preguntas sobre temas ya documentados, recuérdales dónde pueden encontrar la respuesta. Si lo que quieren saber no está todavía en la documentación, ¡pídeles que contribuyan! Por otro lado, dale visibilidad a un proyecto de largo alcance en el que estés trabajando, y utilízalo como razón para rechazar el trabajo adicional. Un \u0026ldquo;no\u0026rdquo; a veces es difícil de procesar para otras personas cuando estas tienen una concepción afianzada sobre ti, mientras que un \u0026ldquo;no puedo porque estoy ocupado\u0026rdquo; es más fácil de digerir.\nContar con el apoyo de tu manager, de modo que él o ella ayude a interceptar peticiones dirigidas hacia ti y redistribuirlas de manera más equilibrada entre otros miembros del equipo, es un impulso significativo. Por último, asegúrate de que el trabajo nuevo que estarás haciendo en lugar de \u0026ldquo;soldar\u0026rdquo; sea considerado valioso y de alto impacto, para que te acerque a tu meta, ya sea un ascenso o un aumento.\nVale la pena decir que debes tener cuidado de no sobrecompensar, pasando a rechazar cualquier petición de ayuda. Sigue participando en trabajo de soldadura, pero anota todo ese esfuerzo (con un impacto correspondiente cuantificable), de modo que no se te olvide en tu siguiente evaluación de rendimiento.\nEvaluaciones asintóticas Las evaluaciones asintóticas son aquellas en las que los criterios de aprobación son inalcanzables, creando una dinámica de \u0026ldquo;Aquiles y la tortuga\u0026rdquo; o de \u0026ldquo;la zanahoria y el bastón \u0026rdquo;.\nAplicado a tu carrera, esto significa que tus esfuerzos difícilmente serán recompensados de forma proporcional, puesto que la meta es inalcanzable. De esta lista, es el único patrón que creo que se usa conscientemente de manera rutinaria. En mi carrera he visto diferentes encarnaciones de este patrón:\nEvaluaciones de rendimiento relativas Consisten en identificar los mejores empleados (según algún criterio) para luego comparar al resto contra ellos.\nPor ejemplo, se escogen las mejores personas en cada nivel de una organización, para luego compararlas con quienes que se encuentren en el nivel inferior a ellas y decidir si éstas últimas merecen un ascenso.\nHay una versión más extrema, llamada stack ranking, donde después de cada evaluación, se determinan también los empleados con más bajo desempeño para despedirlos.\nEn entornos altamente competitivos, donde todos están tratando de hacer mejor la misma actividad estas prácticas podrían tener sentido (por ejemplo, equipos de ventas o de deportes individuales). A mi parecer, sin embargo, es un método nefasto para evaluar el trabajo de ingenieros de software, que a menudo deben trabajar en equipo, coordinar y colaborar entre ellos para lograr un bien común, realizando tareas completamente diferentes (si dos ingenieros en tu equipo están haciendo lo mismo, más vale que haya una buena razón). Utilizar evaluaciones relativas puede crear ambientes hípercompetitivos donde la colaboración se ve como un riesgo, y puede acabar con el tiempo libre de los empleados que quieran lograr un ascenso o un aumento.\nEl artículo de Doug Meil, \u0026ldquo;Stack Ranking: Organizational Cancer\u0026rdquo; explica los antecedentes y las consecuencias del stack ranking.\nUna vez le pregunté a un manager su opinión sobre qué me faltaba para un ascenso, durante un 1:1 luego de una ronda de evaluaciones de rendimiento. Su respuesta fue \u0026ldquo;Pues A y B (otros ingenieros) son las únicas personas en ese nivel\u0026hellip; La barra está puesta muy alta\u0026rdquo;. Las 2 personas que mencionó eran personas muy talentosas, pero se sabía que trabajaban 12 horas diarias o más constantemente. El mensaje subyacente parecía ser: \u0026ldquo;si quieres ascender, sigue su ejemplo\u0026rdquo;. Afortunadamente puse mi bienestar por encima de mi ambición - mi experiencia hasta ese momento decía que el incremento en mi salario no sería suficiente para compensar la fatiga mental y física acumulada por trabajar a ese ritmo durante un año entero.\nEn retrospectiva, esta debió haber sido mi señal de que ese no era ya un equipo donde podría seguir creciendo de una manera sostenible, y que debí haber buscado irme a otro equipo o empezar a buscar otro trabajo.\nLo peor de todo es que la empresa en la que estaba tenía criterios claros para cada nivel en la carrera de ingeniería, pero mi manager por alguna razón no eligió seguirlos. Tu manager debería ser tu mayor entusiasta. Si no tienes su apoyo para seguir avanzando en tu carrera, será muy difícil hacerlo a menos que cambies de equipo o de empresa.\nCriterios vagos o inexistentes Los criterios de evaluación abstractos hacen que sea más fácil crear razones para no dar un aumento. Por ejemplo, si un requisito para que avances al siguiente nivel es \u0026ldquo;Liderar proyectos de alto impacto\u0026rdquo;, una posible razón puede ser que el impacto de tus iniciativas no haya sido suficiente, o que no lideraste suficientes proyectos.\nSeñales de alerta  Tus líderes se basan exclusivamente en las comparaciones con otras personas para evaluar tu rendimiento. El equilibrio de trabajo/ vida en la organización está patas arriba. Tu organización no tiene un plan de carrera con criterios claros para pasar de un nivel al siguiente.  Solución Si solo tu manager está aplicando evaluaciones relativas o stack ranking, trata de hacerle ver que no es una estrategia sostenible si quiere mantener un equipo de ingeniería estable.\nA veces las evaluaciones relativas en equipos de software surgen como resultado de un sesgos inconscientes, no necesariamente como parte de un plan premeditado para aumentar la competencia entre ingenieros. En este caso, un líder responsable y con la suficiente autoridad se dará cuenta de su error y tratará de corregirlo. Dicho eso, hay que tener en cuenta que a veces las manos de tu manager estarán atadas, si es que se trata de políticas que vienen de arriba. En ese caso, tu mejor apuesta es trabajar con él para identificar proyectos cuyo impacto sea difícil de controvertir.\nSin embargo, hay personas que están convencidas de que este tipo de prácticas son efectivas. En ese caso debes preguntarte si estás dispuesto a trabajar en constante competencia con tus pares para avanzar en tu carrera en tu empresa actual.\nObservaciones finales Si todavía no has entrado a un pantano, o no te has encontrado con ninguno de estos patrones, espero que este artículo te ayude a evitarlos en el futuro.\nSi en este momento te encuentras en una situación compleja, recuerda que siempre hay una salida. Hay circunstancias en las cuales nos sentimos acorralados, pero es en esos momentos en los que hay que hacer un alto, respirar, y analizar la situación estratégicamente. Las soluciones que propongo aquí no son exhaustivas ni infalibles, pero espero que te den un punto de partida para comenzar a trazar tu propio camino.\nLo más importante es recordar que tu carrera es tuya. Si bien es valioso ser un buen miembro del equipo y contribuir al éxito de tu organización, esto no debe venir a costa de tu propio desarrollo profesional o bienestar personal. A veces la solución más saludable es reconocer que el ambiente actual no es propicio para tu crecimiento y buscar nuevas oportunidades.\nEstas son algunas de las situaciones que he vivido o que he visto en personas cercanas. Si has encontrado otros patrones de management u organizacionales que resulten en pantanos, me gustaría conocerlos también. Puedes encontrarme en Twitter , Bluesky o por email !\n  Una posible razón por la que escaseen más perspectivas realistas como la de Cindy Sridharan es que, en mi opinión, la mayoría de ICs o líderes no tienen ningún incentivo para admitir errores en público. Desde el punto de vista de un IC, hablar sobre su empleador actual, así sea omitiendo información específica, puede traerle consecuencias negativas. Para un manager, por otro lado, admitir que actuó de manera egoísta o propició ambientes que no se alineaban con los intereses de su empresa o de su(s) equipo(s) puede costarle su carrera.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Sé que esta traducción no es literal, pero \u0026ldquo;trabajo de soldadura\u0026rdquo; es mejor que \u0026ldquo;trabajo de pegamento\u0026rdquo;, o \u0026ldquo;trabajo de adhesión\u0026rdquo; (muy abstracto para mi gusto).\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://blog.0x5d.io/es/posts/swamps/","summary":"Desde hace un par de años, a medida que he tenido la oportunidad de liderar equipos en proyectos y situaciones más complejas e inciertas, me ha picado la curiosidad por entender más sobre management de ingeniería y liderazgo técnico. Por eso he leído 3 libros hasta el momento: The Manager\u0026rsquo;s Path , de Camille Fournier, y An Elegant Puzzle y Staff Engineer de Will Larson.\nRecomiendo muchísimo leerlos, aún si no estás interesado en convertirte en manager (por mi parte también siento que me falta mucho por aprender en el lado técnico): aprender sobre management me ha ayudado a entender mejor qué debo esperar de mis managers y qué esperan ellos de mí, y también he aprendido muchos tips de liderazgo que se pueden aplicar en general.","title":"Pantanos"},{"content":"Aquí voy a escribir el artículo que me gustaría haber leído cuando empecé a escribir RFCs en mi trabajo. Empezaré dando algunas razones para escribir RFCs, y luego hablaré sobre mi proceso actual y una plantilla que puedes usar.\nEste artículo no es una especificación formal de cómo redactar RFCs. Más bien se trata un sistema flexible que me ha resultado útil en los últimos 2 o 3 años. Me tomó un rato entender el valor de los RFCs, mas ahora los considero una herramienta muy valiosa. Si ya eres un experto en RFCs, tal vez encuentres aquí una perspectiva diferente, y si tienes algún consejo para mí, ¡por favor cuéntamelo! Si nunca has escrito un RFC, espero que al final de este artículo sientas que vale la pena el esfuerzo y les des una oportunidad pronto.\nEspera un momento - qué es un RFC? RFC significa \u0026ldquo;Request for Comments\u0026rdquo;, o \u0026ldquo;Petición de Comentarios\u0026rdquo;, en español. Es un documento estructurado escrito en lenguaje natural donde se explica una propuesta. La mayoría de las veces se trata de propuesta técnica, pero un RFC bien podría ser usado para proponer otros cambios, como por ejemplo en un proceso de tu organización.\n¿Por qué? He identificado 3 beneficios principales de los RFCs. Cada uno está relacionado con una fase general del proceso de toma de decisiones: el antes, el durante, y el después. Para resumir, me gusta que incentivan un análisis previo del cambio y su impacto, fomentan la colaboración asíncrona y las discusiones serias y pausadas, y sirven como referencia para entender cómo y por qué la decisión fue tomada.\nEn una organización saludable, todo esto debería conducir a que gastes menos tiempo que si te metieras de lleno a escribir código desde el principio. Es contraintuitivo, pero después de dedicar tiempo escribiendo un buen RFC, el camino a seguir debería ser más claro y fácil de andar.\nEl antes: Análisis previo La escritura de un RFC comienza con una exploración meticulosa de los espacios del problema y la solución (es decir, la definición del problema y el conjunto de posibles soluciones). El peroblema puede haber sido descubierto por tí (por ejemplo, que el rendimiento de una consulta de base de datos ejecutada frecuentemente se haya degradado), o te pudo haber sido asignado para que lo investigues (como un nuevo caso de uso que el producto en el cual trabajas debe tener en cuenta). Sea cual sea el escenario, el problema en sí, así como los requisitos que surjan de éste deben ser desglosados.\nEsta descripción del problema y los requisitos (tanto funcionales como no funcionales) serán de ayuda al momento de analizar las diferentes alternativas para resolverlo. Éstos restringen el espacio de la solución, llevándote hacia la solución óptima (aún cuando esta no sea la \u0026ldquo;ideal\u0026rdquo;).\nLuego, es esencial identificar los coautores, colaboradores e interesados, así como tu audiencia.\n Los coautores trabajarán junto a ti en la elaboración del RFC, haciéndose cargo de partes de él o compartiendo toda la responsabilidad contigo. Los colaboradores son personas que pueden ayudarte discutiendo ideas contigo o guiándote. Por ejemplo, una compañera responsable de un subsistema con el que tu código deberá interactuar, o un miembro del equipo de producto que pueda ayudarte a entender ciertos casos de uso. At this point, it\u0026rsquo;s essential to identify co-authors, collaborators, stakeholders, and your audience. Un interesado es cualquier persona que se pueda ver impactada por la potencial implementación de tu RFC. Es un grupo naturalmente \u0026ldquo;abierto\u0026rdquo; que puede incluir colegas que deberán re-priorizar su trabajo, sus managers o incluso clientes que están a la espera de una nueva funcionalidad. Tu audiencia es quien sea que lea tu RFC. Es decir, cualquiera cuyos comentarios u opiniones quieras recibir. Debes identificarla tan pronto como sea posible, ya que definirá casi todos los aspectos de tu RFC: tu estilo al escribirlo (ej. serio o informal), el tipo y la cantidad de material auxiliar que debas incluir (como diagramas, pedazos de código, prototipos de los cambios en la UI, etc.). Si no logras establecer quiénes forman tu audiencia, será más difícil obtener sugerencias de buena calidad. Una señal común de que debes revaluar quiénes la conforman es si empiezas a recibir comentarios indicando que debes dar más contexto en alguna parte, o que debes explicar algo mejor. En estos casos tu reacción no debe ser nunca excluir a las personas haciendo estos comentarios, sino identificar su posición y adaptar tu RFC para que sea más digerible para ellos.  Identificar estos cuatro grupos ayuda muchísimo a reducir tanto la magnitud del riesgo como los diferentes tipos de riesgo asociados con tu propuesta.\nLa primera dimensión de riesgo es la de utilización de recursos. Después de haber trabajado concienzudamente en tu RFC, si es aprobado, entenderás mejor qué se necesita hacer, quiénes lo harán, y cuánto tiempo tomará. Por otro lado, si esrechazado, no habrás desperdiciado tu valioso tiempo trabajando en un proyecto potencialmente complicado sólo para darte cuenta que no iba a funcionar. Se podría decir que nuestro trabajo como programadores no es escribir tanto código como sea posible, sino minimizar la cantidad de código escrito.\nLa segunda dimensión es la gestión del cambio. Tu propuesta inevitablemente afectará el sistema que modifica. Pensar profundamente en el problema y su solución te ayudará a ver cómo la implementación de tu RFC impactará otros componentes y usuarios, facilitando la ideación de una estrategia de migración.\nLa tercera es el impacto en las personas. Si te encuentras escribiendo un RFC, lo más probable es que el problema al que te enfrentas no sea trivial. Como lo dije antes, es posible que su implementación requiera cambios en otros sistemas, así como un plan para desplegarlos (o un plan de migración).Esto significa que tendrás que obtener la aprobación de las personas responsables de dichos sistemas. Los RFCs suponen un excelente espacio para colaborar con ellas hasta que lleguen a un consenso. Si tienen alguna duda, puedes contextualizar mejor tu propuesta para hacerla más clara. Si encuentran un defecto en la solución, puedes tratar de encontrar una alternativa mejor. Cuando todas las personas relevantes hayan aprobado tu RFC, entenderán claramente su rol (o el rol de su equipo) en su implementación, y podrán planear su trabajo según lo requieran.\nDurante: Colaboración (asíncrona) Algunos RFCs son simples: todos conocen el problema, la solución resulta ser de alcance limitado y el plan de ejecución es claro. Otros, sin embargo, son complejos y necesitan que varias personas colaboren escribiéndolo y revisándolo. En esas ocasiones, reunirse con todos en una videollamada suele ser un método ineficiente de recopilar opiniones e ideas. La forma óptima de escribir y revisar RFCs es con herramientas que fomenten la comunicación asíncrona.\nSi estás escribiendo el documento junto a alguien más, pueden contribuir a él en los momentos del día en que sean más productivos. De hecho, trabajar en RFCs suele ser un ciclo de escribir, alejarse para pensar y examinar opciones, dibujar diagramas, leer código y otros RFCs y esbozar soluciones. Por lo tanto, sincronizar múltiples personas para que siempre estén en las mismas fases es casi imposible.\nPara quienes revisen el RFC, un patrón asíncrono de comunicación les da tiempo de leer todo el documento, tomar notas y pensar en sugerencias y preguntas valiosas. Esta es una alternativa mejor a obligar a alguien a formular opiniones y preguntas en un instante. También, como autor, te permite reflexionar sin afán sobre los comentarios hasta el momento, para evitar malos entendidos y el spam. Si quienes están participando en la sección de comentarios del documento perciben que hay demasiados comentarios cortos (como si fuera un chat en tiempo real), probablemente la ignoren totalmente.\nAsimismo, los RFCs desacoplan la definición de la ejecución. Los autores no tienen que ser necesariamente quienes implementen la solucion descrita en el documento, reduciendo el bus factor en el equipo. Por ejemplo, piensa en un escenario donde no se escribió ningún RFC, y la persona a cargo de solucionar el problema cambia de equipo o se va de la empresa. Normalmente, leer (en algunos casos, descifrar) el código que dejaron toma mucho más tiempo.\nDespués: Referencia Luego de haber implementado el RFC, éste seguirá siendo un recurso invaluable, ya que alguien que tenga preguntas sobre por qué las cosas se hicieron de cierta forma podrá referirse a él. ¡A veces, incluso la respuesta a por qué fueron hechas las cosas, independientemente del cómo, no es para nada clara tampoco!\nEn una industria tan dinámica (para ponerlo en términos suaves), seguramente en el transcurso de algunos meses algunos de tus colegas cambiarán de equipo o se irán de tu empresa. ¡Y eventualmente tú también lo harás! Entrar a un equipo que tiene una colección de RFCs bien escritos describiendo las partes más importantes del sistema es un alivio.\nOtro efecto secundario menor (pero importante) de todo esto es facilitar que las personas que entren a la empresa empaticen con las personas que llevan más tiempo. Es fácil juzgar a alguien cuando encuentras una parte del código que contribuyeron y que no entiendes o que no cumple con los estándares que esperarías. El código \u0026ldquo;feo\u0026rdquo; no debería evaluarse sin contexto, y los RFCs ayudan en esos casos. Por ejemplo, si los requisitos fueron documentados, podrían decir mucho del trasfondo en el cual el código fue escrito, así como de las circunstancias que rigieron la implementación\n¿Cuándo? Con el tiempo desarrollarás un instinto para saber cuándo debes escribir RFCs. Sin embargo, una buena regla general es revisar si alguno de los beneficios que mencioné antes (análisis previo, colaboración, referencia) son o serán valiosos para ti. Si al menos uno te parece buena idea, el tiempo que dediques a escribir un RFC valdrá la pena. Es común pensar que los RFCs no son útiles para equipos pequeños, donde todos están en sintonía y saben qué hay que hacer, pero te sorprendería ver qué tan a menudo nuestras ideas sobre cómo funcionan las cosas (y sobre cómo pueden cambiar) resultan estar erradas. En esos casos, es mejor darte cuenta de tu error después de haber escrito algunos cientos de palabras, en lugar del último commit de un pull request gigante. O peor aún, tras haber desplegado un cambio irreversible a producción.\nDel mismo modo, los equipos crecen y cambian, y se nos olvidan las cosas. Si la empresa para la que trabajas es pequeña, no significa que lo seguirá siendo para siempre. Si empieza a crecer, seguramente empezarán a contratar nuevos empleados a un ritmo creciente y los RFCs les ayudarán a ponerse al día mucho más rápido. Adicionalmente, cuando uno de ellos te pregunte \u0026ldquo;¡¿Qué estabas pensando cuando agregaste esta funcionalidad?!\u0026rdquo;, puedes enviarle un enlace al RFC sin tener que preocuparte por recordar cada detalle de cada decisión.\nSin embargo, algo que vale la pena recordar es que no todos los cambios necesitan un RFC. Algunos problemas son pequeños y auto-contenidos, y su solución puede ser obvia. En esos casos, un mensaje de commit claro o una descripción completa de tu pull request serían suficiente para documentar el cambio. Si alguien quiere aprender más sobre un archivo en particular, puede utilizar git blame para hacer un viaje en el tiempo y leerlos.\nNo hay reglas matemáticas o completamente objetivas para decidir cuándo y cuándo no escribir un RFC. Cuando haya dudas, lo mejor que puedes hacer es preguntarle a tu equipo para entender sus expectativas.\n¿Cómo? Esta es una estrategia flexible que uso cuando es momento de empezar a trabajar:\n Evalúa el espacio del problema y de la solución para decidir si se necesita escribir un RFC. Identifica los coautores, colaboradores, interesados y tu audiencia. ¡Empieza a escribir! Échale un vistazo a la plantilla . Enviálo y recibe comentarios y sugerencias. Cuando hayas incorporado todas las sugerencias, asegúrate de que tu propuesta sea aceptada. Impleméntala.  Tomemos un momento para hablar más de los puntos 4 y 5. Cuando envíes un borrador, es probable que recibas tantos comentarios sobre la forma como sobre el contenido, como por ejemplo una nota que olvidaste borrar o una peticiones para que elabores una idea o para que incluyas más materiales visuales. Si en esa fase temprana se lo envías a muchas personas, recibirás muchos comentarios similares. Puede que una porción de tu audiencia no lean todo tu RFC si sienten que es un borrador inicial. Por eso, lo ideal es que refines tu RFC en estas fases iniciales con un grupo de personas que estén muy interesados en él, los cuales son normalmente tu equipo o tu manager. Una vez lo hayas hecho, puedes enviárselo a más personas. La nueva ola de comentarios debería consistir de preguntas y sugerencias sobre lo esencial del contenido.\nLa aprobación de un RFC depende totalmente de las reglas o acuerdos que existan en tu organización. Algunos equipos necesitan firmas explícitas de las personas que lo revisen, mientras que otros están cómodos al interpretar la falta de sugerencias pendientes como aprobación implícita. De cualquier forma, asegúrate de todos estén en la misma página en este aspecto.\nEn conclusión Mantener una mente abierta es una parte esencial de todo el proceso. Al fin y al cabo, se trata de una petición de comentarios. Estás pidiéndole a otras personas que analicen tu propuesta. A algunos les va a gustar mucho, mientras que a otros no. Puede que esto último no se sienta muy bien, pero me he dado cuenta que en los casos donde se da esta división, las personas que no están convencidas desde el principio son las que más te pueden ayudar a elaborar una propuesta verdaderamente buena, asumiendo buena fe, claro está, y que nadie te está poniendo obstáculos para beneficio propio (si sospechas lo contrario, puede existir un gran problema de cultura organizacional).\nSi alguien no está seguro de tu RFC, puede que haga falta considerar más alternativas. A veces, puede que alguien descubra un defecto importante en tu propuesta, causando que esta sea rechazada. Esto puede desalentarte, pero es en realidad un excelente desenlace. Esa persona te salvó de malgastar tu tiempo persiguiendo un objetivo que terminaría mal. Vuelve al punto de partida y analiza nuevas ideas teniendo en cuenta lo que aprendiste. O mejor aún, trata de que dicha persona se involucre como colaborador o coautor para que juntos trabajen en una propuesta más sólida.\n","permalink":"https://blog.0x5d.io/es/posts/rfcs/","summary":"Aquí voy a escribir el artículo que me gustaría haber leído cuando empecé a escribir RFCs en mi trabajo. Empezaré dando algunas razones para escribir RFCs, y luego hablaré sobre mi proceso actual y una plantilla que puedes usar.\nEste artículo no es una especificación formal de cómo redactar RFCs. Más bien se trata un sistema flexible que me ha resultado útil en los últimos 2 o 3 años. Me tomó un rato entender el valor de los RFCs, mas ahora los considero una herramienta muy valiosa.","title":"Sobre escribir RFCs"}]