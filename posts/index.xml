<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on 0x5d</title><link>https://blog.0x5d.io/posts/</link><description>Recent content in Posts on 0x5d</description><generator>Hugo -- 0.140.2</generator><language>en</language><lastBuildDate>Sun, 17 Aug 2025 15:11:47 -0500</lastBuildDate><atom:link href="https://blog.0x5d.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>A cleaner Temporal API</title><link>https://blog.0x5d.io/posts/temporal-api/</link><pubDate>Sun, 17 Aug 2025 15:11:47 -0500</pubDate><guid>https://blog.0x5d.io/posts/temporal-api/</guid><description>&lt;blockquote>
&lt;p>The code for this post is available on &lt;a href="https://github.com/0x5d/temporal-example" target="_blank" >GitHub&lt;/a>
.&lt;/p>
&lt;/blockquote>
&lt;p>Temporal is a nice tool, providing a useful model for executing distributed processes along with the mechanisms you need to run them reliably, like retries &amp;amp; timeouts.&lt;/p>
&lt;p>However the Go SDK can make your code very noisy. In a language where every line is really 3 or 4 lines,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">res&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">doStuff&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>any amplification of noise is very much unwelcome in my opinion.&lt;/p></description></item><item><title>On setting time aside to work on your goals</title><link>https://blog.0x5d.io/posts/time-goals/</link><pubDate>Sun, 03 Aug 2025 15:11:47 -0500</pubDate><guid>https://blog.0x5d.io/posts/time-goals/</guid><description>&lt;p>&lt;em>&amp;ldquo;I&amp;rsquo;ve been meaning to do A&amp;rdquo;&lt;/em>&lt;/p>
&lt;p>- Lots of people, very often.&lt;/p>
&lt;p>You&amp;rsquo;ve probably heard these words too, usually followed by &lt;em>&amp;quot;&amp;hellip;but I just can&amp;rsquo;t find the time&amp;quot;&lt;/em>, or &lt;em>&amp;quot;&amp;hellip;but I keep forgetting&amp;quot;&lt;/em>.&lt;/p>
&lt;p>I&amp;rsquo;ve been on both sides of this phrase, and they both feel bad.&lt;/p>
&lt;p>If you&amp;rsquo;re the one saying it, you probably feel frustrated. You &lt;em>really&lt;/em> want to do the thing, and you &lt;em>really&lt;/em> didn&amp;rsquo;t have time to do it, and it keeps happening.&lt;/p></description></item><item><title>Easy</title><link>https://blog.0x5d.io/posts/easy/</link><pubDate>Mon, 27 Jan 2025 15:11:47 -0500</pubDate><guid>https://blog.0x5d.io/posts/easy/</guid><description>&lt;p>Rich Hickey&amp;rsquo;s &lt;a href="https://www.youtube.com/watch?v=SxdOUGdseq4" target="_blank" >&amp;ldquo;Simple Made Easy&amp;rdquo;&lt;/a>
is one of the best talks I&amp;rsquo;ve ever seen. I watched it again recently, after 8 years, but now the part that stood out was the section where he goes into the etymology of &amp;ldquo;&lt;em>Easy&lt;/em>&amp;rdquo; (&lt;a href="https://youtu.be/SxdOUGdseq4?si=7XtysuSXbf0OwLc6&amp;amp;t=174" target="_blank" >timestamp&lt;/a>
). It happens very early in the talk, and I just couldn&amp;rsquo;t think about anything else.&lt;/p>
&lt;p>&amp;ldquo;Easy&amp;rdquo; is &amp;ldquo;adjacent&amp;rdquo;. &amp;ldquo;Easy&amp;rdquo; is &amp;ldquo;nearby&amp;rdquo;. It&amp;rsquo;s gotta be one of the best &lt;a href="https://en.wiktionary.org/wiki/adiacens#Latin" target="_blank" >origins&lt;/a>
of a word. You extend your arm, and grab it. Easy. You walk a little bit, and you&amp;rsquo;re there. Easy!&lt;/p></description></item><item><title>Rust Adventures: External Sort, Chapter 1</title><link>https://blog.0x5d.io/posts/ext-sort/</link><pubDate>Sat, 16 Nov 2024 20:19:47 -0500</pubDate><guid>https://blog.0x5d.io/posts/ext-sort/</guid><description>&lt;p>I&amp;rsquo;ve been learning Rust in my free time for the last 6 months. I read The Book and I&amp;rsquo;m in the middle of reading Rust for Rustaceans (&lt;a href="https://blog.0x5d.io/posts/rust-for-rustaceans/" target="_blank" >my notes so far&lt;/a>
), but after doing a couple of very small exercises and projects I wanted to do something more &lt;em>rusty&lt;/em>.&lt;/p>
&lt;p>So on Sundays, in between espressos and with very good company, I started writing an external sort.&lt;/p>
&lt;p>This is the 1st post in a series, where I cover the code that generates the data to be sorted. Stay tuned for the next one!&lt;/p></description></item><item><title>Notes on Rust For Rustaceans, Pt. 1</title><link>https://blog.0x5d.io/posts/rust-for-rustaceans/</link><pubDate>Sat, 22 Jun 2024 20:19:47 -0500</pubDate><guid>https://blog.0x5d.io/posts/rust-for-rustaceans/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>I&amp;rsquo;m really enjoying reading &lt;a href="https://x.com/jonhoo" target="_blank" >Jon Gjenset&lt;/a>
&amp;rsquo;s &lt;a href="https://rust-for-rustaceans.com/" target="_blank" >Rust for Rustaceans&lt;/a>
. I appreciated the author&amp;rsquo;s decision to assume his target audience to be people who had just finished &lt;a href="https://doc.rust-lang.org/book/title-page.html" target="_blank" >The Book&lt;/a>
, making it sort of an expansion or a Level II.&lt;/p>
&lt;p>However, I found it light on contrasting examples, as well as images. I&amp;rsquo;m more of a visual learner, so I find them very useful to understand what&amp;rsquo;s right (or wrong), or to help me create a mental model of a concept being described.&lt;/p></description></item><item><title>On writing RFCs</title><link>https://blog.0x5d.io/posts/rfcs/</link><pubDate>Sun, 12 Mar 2023 15:33:47 -0500</pubDate><guid>https://blog.0x5d.io/posts/rfcs/</guid><description>&lt;p>I&amp;rsquo;ll write the post I wish I&amp;rsquo;d read before I started writing RFCs at work. I&amp;rsquo;ll start by providing some motivation for RFCs, then go over my &lt;em>current&lt;/em> process for writing them and provide a &lt;a href="https://github.com/0x5d/0x5d.github.io/blob/main/content/posts/rfcs/files/rfc-template.md" target="_blank" >template&lt;/a>
that you can use.&lt;/p>
&lt;p>This post isn&amp;rsquo;t by any means a formal specification for writing RFCs. If anything, it&amp;rsquo;s a loose framework I&amp;rsquo;ve found helpful over the past couple of years. I&amp;rsquo;m also writing this as a reference for myself in the future, but I hope it&amp;rsquo;ll be valuable for you too. It took me a while to appreciate the value of RFCs, but now I consider them one of the helpful tools I use regularly. If you&amp;rsquo;re an RFCs veteran, maybe this will give you a different perspective on them, and if you have tips, please share them! If you&amp;rsquo;ve never written an RFC, I hope when you&amp;rsquo;re finished reading this post you&amp;rsquo;ll feel confident enough to invest the time in one next time you get the chance.&lt;/p></description></item></channel></rss>