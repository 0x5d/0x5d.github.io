[{"content":"Intro I\u0026rsquo;m really enjoying reading Jon Gjenset\u0026rsquo;s Rust for Rustaceans. I appreciated the author\u0026rsquo;s decision to assume his target audience to be people who had just finished The Book, making it sort of an expansion or a Level II.\nHowever, I found it light on contrasting examples, as well as images. I\u0026rsquo;m more of a visual learner, so I find them very useful to understand what\u0026rsquo;s right (or wrong), or to help me create a mental model of a concept being described.\nTherefore, to help me really grasp the topics discussed in the book, I\u0026rsquo;m writing the following notes. I decided to share them here in case they\u0026rsquo;re useful to someone else.\n ℹ️ I have written some of these notes out of my own intuition. If you find an incorrect explanation, or consider my mental model for a concept to be wrong, please let me know!\n  ℹ️ This is a WIP. I\u0026rsquo;ll add more entries as I make progress through the book and write more examples \u0026amp; explanations.\n  ⚠️ All the base code snippets I\u0026rsquo;m quoting here are © 2022 John Gjengset. Please buy the book, it\u0026rsquo;s a must-read if you\u0026rsquo;re serious about learning Rust.\n I\u0026rsquo;m dividing the post by chapters \u0026amp; sections within them. There might be missing sections, which would mean I didn\u0026rsquo;t feel the need to supplement my reading with additional examples.\nAnyway, enough talking. Here it is.\nChapter 1: Foundations Section 1.3: Borrowing and Lifetimes Generic Lifetimes This subsection talks about how sometimes you need to specify different lifetimes for different fields in your types (making your type generic over multiple lifetimes). Here\u0026rsquo;s the example presented in the book.\nstruct StrSplit\u0026lt;\u0026#39;s, \u0026#39;p\u0026gt; { document: \u0026amp;\u0026#39;s str, delimiter: \u0026amp;\u0026#39;p str, } impl\u0026lt;\u0026#39;s, \u0026#39;p\u0026gt; Iterator for StrSplit\u0026lt;\u0026#39;s, \u0026#39;p\u0026gt; { type Item = \u0026amp;\u0026#39;s str; fn next(\u0026amp;mut self) -\u0026gt; Option\u0026lt;Self::Item\u0026gt; { todo!() } } fn str_before(s: \u0026amp;str, c: char) -\u0026gt; Option\u0026lt;\u0026amp;str\u0026gt; { fn str_before(s: \u0026amp;str, c: char) -\u0026gt; Option\u0026lt;\u0026amp;str\u0026gt; { StrSplit {document: s, delimiter: \u0026amp;c.to_string()}.next() } } The author then mentions that making StrSplit generic over a single lifetime would cause a compilation error. Indeed, if we make the change\u0026hellip;\nstruct StrSplit\u0026lt;\u0026#39;s\u0026gt; { delimiter: \u0026amp;\u0026#39;s str, document: \u0026amp;\u0026#39;s str, } impl\u0026lt;\u0026#39;s\u0026gt; Iterator for StrSplit\u0026lt;\u0026#39;s\u0026gt; { // ... contents remain the same } fn str_before(s: \u0026amp;str, c: char) -\u0026gt; Option\u0026lt;\u0026amp;str\u0026gt; { StrSplit {document: s, delimiter: \u0026amp;c.to_string()}.next() } and run cargo build, we get the following error:\nerror[E0515]: cannot return value referencing temporary value --\u0026gt; src/main_wrong.rs:14:5 | 14 | StrSplit {document: s, delimiter: \u0026amp;c.to_string()}.next() | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------^^^^^^^^ | | | | | temporary value created here | returns a value referencing data owned by the current function It becomes more evident if we mark the lifetimes using the notation used in The Book:\n//---------------------------+- s \u0026amp; c are \u0026#39;a fn str_before(s: \u0026amp;str, c: char) -\u0026gt; Option\u0026lt;\u0026amp;str\u0026gt; {// |  let delim = \u0026amp;c.to_string(); //--+- delim must also be \u0026#39;a |  StrSplit { // | |  document: s, // | |  delimiter: delim, // | |  } // | |  .next() // | |  //--+ delim is dropped | } // |  //---------------------------+ s \u0026amp; c live on! delim\u0026rsquo;s timeline is shorter than s\u0026rsquo;s and c\u0026rsquo;s, causing a contradiction: 'a \u0026lt; 'a.\nChapter 2: Types Section 2.2: Layout The explanation here comparing the default Rust in-memory representation vs the C-compatible one (repr(C)) is quite clear, but I thought a visual comparison would be helpful.\nThis is the example type used in the book:\n#[repr(C)] struct Foo { tiny: bool, normal: u32, small: u8, long: u64, short: u16, } As explained in page 21,\n Complex types - types that contain other types - are typically assigned the largest alignment of any type they contain.\n Therefore, this is its C-compatible layout, as described in page 22 (each square is 1B):\nBy visualizing it as a grid, it becomes clearer that the padding is determined by the field with the type that takes up the most space, long.\nAnd this would be Rust\u0026rsquo;s default layout (i.e. specifying #[repr(Rust)], or no repr attribute at all), which is 8B-aligned like the C-compatible layout, but which requires no padding between fields, reducing the total size to 16B.\nBonus Track: Alignment Modifiers The book doesn\u0026rsquo;t mention the alignment modifiers align and packed, which can be used to \u0026ldquo;respectively raise or lower the alignment of structs and unions\u0026rdquo;.\nWhile reading about them, I again felt that their effects would be easier to understand and explain with a visual model.\npacked\nIf we add #[repr(C, packed(2))] to the Foo struct, the struct will be 2B-aligned. This is what it would look like (the \u0026ldquo;grid\u0026rdquo; visual model becomes less useful here, since padding isn\u0026rsquo;t determined by a field\u0026rsquo;s size):\nThis can be verified with the following code:\nuse std::mem; #[repr(C, packed(2))] struct Foo { tiny: bool, normal: u32, small: u8, long: u64, short: u16, } fn main() { assert_eq!(mem::align_of::\u0026lt;Foo\u0026gt;(), 2); assert_eq!(mem::size_of::\u0026lt;Foo\u0026gt;(), 18); } The layout for repr(Rust, packed(2)) is still the same as the one before, since 16B is 2B-aligned there was no padding.\nalign\nAs mentioned above, align raises the alignment. If we add #[repr(align(32))] (default representation, 32B-aligned) to Foo, this is what we get:\nAgain, this can be checked with\nuse std::mem; #[repr(align(32))] struct Foo { tiny: bool, normal: u32, small: u8, long: u64, short: u16, } fn main() { assert_eq!(mem::align_of::\u0026lt;Foo\u0026gt;(), 32); assert_eq!(mem::size_of::\u0026lt;Foo\u0026gt;(), 32); } ","permalink":"http://0x5d.github.io/posts/rust-for-rustaceans/","summary":"Intro I\u0026rsquo;m really enjoying reading Jon Gjenset\u0026rsquo;s Rust for Rustaceans. I appreciated the author\u0026rsquo;s decision to assume his target audience to be people who had just finished The Book, making it sort of an expansion or a Level II.\nHowever, I found it light on contrasting examples, as well as images. I\u0026rsquo;m more of a visual learner, so I find them very useful to understand what\u0026rsquo;s right (or wrong), or to help me create a mental model of a concept being described.","title":"Notes on Rust For Rustaceans, Pt. 1"},{"content":"I\u0026rsquo;ll write the post I wish I\u0026rsquo;d read before I started writing RFCs at work. I\u0026rsquo;ll start by providing some motivation for RFCs, then go over my current process for writing them and provide a template that you can use.\nThis post isn\u0026rsquo;t by any means a formal specification for writing RFCs. If anything, it\u0026rsquo;s a loose framework I\u0026rsquo;ve found helpful over the past couple of years. I\u0026rsquo;m also writing this as a reference for myself in the future, but I hope it\u0026rsquo;ll be valuable for you too. It took me a while to appreciate the value of RFCs, but now I consider them one of the helpful tools I use regularly. If you\u0026rsquo;re an RFCs veteran, maybe this will give you a different perspective on them, and if you have tips, please share them! If you\u0026rsquo;ve never written an RFC, I hope when you\u0026rsquo;re finished reading this post you\u0026rsquo;ll feel confident enough to invest the time in one next time you get the chance.\nHold on - what\u0026rsquo;s an RFC? RFC stands for \u0026ldquo;Request for Comments\u0026rdquo;. It\u0026rsquo;s a structured document written in natural language explaining a proposal. Most of the time, RFCs are written for technical proposals. Still, they could be used to propose a change in an organizational process.\nWhy? I\u0026rsquo;ve found 3 main benefits of writing RFCs. They are each related to each general stage of the decision-making process: before, during and after. In short, I like that they facilitate an upfront analysis of the change and its implications, encourage asynchronous collaboration and thoughtful discussion, and serve as a future reference to understand how and why the decision was made.\nIn a healthy organization, this should also mean you\u0026rsquo;ll spend less time overall than if you had just dove right into coding. It often seems counter-productive, but after investing time into writing a good RFC, the path forward should be clearer and smoother in many ways.\nBefore: Upfront analysis Writing an RFC requires thoroughly exploring the problem and solution spaces. The problem might be something you discovered (e.g., a frequently-run query\u0026rsquo;s performance has degraded) or something given to you (e.g., a use-case discovered by the Product or Design team that the product should support). Nevertheless, the problem itself and the requirements stemming from it should be thoughtfully broken down.\nThis problem description and list of functional and non-functional requirements will be helpful when pondering the different alternatives to solve the problem. They effectively restrict the solution space, guiding you to the optimal - which might not be the \u0026ldquo;ideal\u0026rdquo; - solution.\nAt this point, it\u0026rsquo;s essential to identify co-authors, collaborators, stakeholders, and your audience.\n Co-authors will actively work on writing the RFC with you, committing time to think about it or parts of it. Collaborators are people who can guide you or help you bounce ideas off. For example, a team member who owns a subsystem your code will need to interact with, or a product team member who can help you understand the underlying use cases better. Stakeholders are any folks impacted by the RFC\u0026rsquo;s implementation. It\u0026rsquo;s a naturally \u0026ldquo;open\u0026rdquo; group that might include contributors who must prioritize new work, their managers, customers waiting for a specific feature, etc. Your audience is whoever you intend to get feedback from. You must identify it early as it will determine the style of writing you should use and the type of additional material you should include (such as diagrams, code snippets, or wireframes). If you fail to establish your audience, receiving high-quality feedback on your RFC will become more challenging. A clear sign of this is that commenters will usually ask you to explain something better or add more context. In those cases, your reaction shouldn\u0026rsquo;t be to exclude them from the review process - instead, try to understand their background and adapt your RFC to make it more digestible.  I\u0026rsquo;ve found the things I described in this section to help reduce the risk (both in magnitude and type) associated with your proposal.\nThe first risk dimension is resource utilization. If your RFC is approved, you\u0026rsquo;ll better understand what needs to be done, who should do it, and how long it will take. On the other hand, if it\u0026rsquo;s rejected, you won\u0026rsquo;t have wasted your valuable time working on a potentially-complex project only to find out it wasn\u0026rsquo;t needed. Arguably, our work as programmers isn\u0026rsquo;t to write as much code as possible but to minimize the amount of code that needs to be written.\nThe second is change management. Your proposal will inevitably affect the system it modifies. Thinking about the problem and solution in such a profound way will help you see how implementing your RFC will impact other components and users, making coming up with a migration strategy an easier task.\nThe third is the impact on people. If you\u0026rsquo;re writing an RFC, chances are the problem you\u0026rsquo;re tackling isn\u0026rsquo;t trivial. As stated above, it will probably require immediate changes in other components or systems and a timeline for rolling them out (migration). This means you\u0026rsquo;ll need to get the people responsible for those components to approve it. An RFC provides a great space to collaborate with them until everyone is onboard. If they have doubts, you can add more context to clarify everything. Suppose they spot a flaw in your understanding of how other components work. In that case, you can reassess and develop a better alternative. When your RFC has been approved by all the relevant people, they\u0026rsquo;ll have a clear picture of their role (or their teams' role) and plan accordingly.\nDuring: (Asynchronous) collaboration Some RFCs are simple - everyone knows the problem, and the solution is small in scope with a clear execution plan. Some are complex and require several people to write and review. In those cases, getting everyone on a video call is a sub-optimal way to get everyone\u0026rsquo;s thoughts. The most efficient way to write and review RFCs is with tools that enable asynchronous communication.\nWhen you\u0026rsquo;re collaborating with someone on authoring the document, it allows each of you to write and contribute when you\u0026rsquo;re the most productive. Furthermore, writing RFCs usually requires stepping away, drawing diagrams, reading existing code, and sketching solutions.\nFor the reviewers, it gives them time to read the whole document, take notes and think of insightful suggestions or meaningful questions. This is way more effective than forcing someone to provide an opinion on the spot. As an author, it also helps to digest the comments on your RFC, to prevent misunderstandings or spam. If you or someone uses the comments section of a shared document as a rapid-fire chat, people will tune off and ignore the conversation altogether.\nAdditionally, RFCs decouple definition from execution. The authors don\u0026rsquo;t necessarily need to be the ones to implement the solution described in it, reducing the bus factor in the team. Consider the alternative, where no RFC was written, and the person in charge switches teams or leaves the company altogether. Reading (sometimes, \u0026ldquo;deciphering\u0026rdquo;) the code they left behind is usually more time-consuming.\nAfter: Future reference After the RFC has been implemented, it\u0026rsquo;s still an invaluable resource, as people can refer back to it if they have questions about why things were done the way they were done. Sometimes, even the fundamental question of why they were done, regardless of the specific approach taken, isn\u0026rsquo;t obvious at all.\nIn such a dynamic (to put it lightly) industry, people will switch teams, and they will leave companies. And so will you, probably! Coming into a new team and having a set of well-written RFCs for the most relevant parts is a godsend.\nAnother minor - but still significant - side-effect of this is making it easier for folks who joined the team recently to empathize with employees with a longer tenure. It can be easy to judge someone harshly when you see a part of the codebase they contributed that doesn\u0026rsquo;t make sense. \u0026ldquo;Bad\u0026rdquo; code often can\u0026rsquo;t be taken at face value, and RFCs help with that. If the requirements were documented, they could say a lot about the context in which it was written and the constraints that limited the implementation.\nWhen? In time, you\u0026rsquo;ll instinctively know when to invest time into writing RFCs. However, a good rule of thumb is to review each of the above reasons for writing one (upfront analysis, collaboration, future reference) and consider whether any will be valuable to you (or future you!). If at least one of them seems like a good thing to have, chances are it\u0026rsquo;ll be time well spent. It\u0026rsquo;s easy to dismiss writing RFCs if your team is small and everyone is on the same page about what needs to be done. However, you\u0026rsquo;ll be surprised at how often your assumptions about how something works - or how it can be changed - turn out to be wrong. When that happens, it\u0026rsquo;s usually way better if you\u0026rsquo;re just writing a document instead of at the last commit of a colossal pull request.\nSimilarly, teams grow and change, and we forget things. If your company is small now, it doesn\u0026rsquo;t mean it will remain so forever. If it starts growing, you might need to hire people at an increasing rate, and RFCs will help them hit the ground running when they join. Also, when someone new asks you, \u0026ldquo;what were you thinking when you added this feature?!\u0026rdquo;, you can point them to the RFC and not worry about having to keep every detail in your mind.\nSomething to remember, though, is that not every change needs an RFC. Some problems are small and self-contained, and their solution obvious or not controversial. In those cases, clear commit messages and a comprehensive cover letter for your pull request will go a long way in documenting the change. When someone wants to learn more about a particular file, they can use git blame and read them.\nThere are no mathematical, completely objective rules to know when or not to invest your time in an RFC. If in doubt, talk to your team and understand their expectations.\nHow? When it\u0026rsquo;s time to get to work, I\u0026rsquo;ve used a loose strategy based on the above.\n Assess the problem and solution spaces - is an RFC needed? Identify co-authors, collaborators, stakeholders, and audience. Start writing! Take a look at the template. Share it and get feedback. When all feedback has been addressed, ensure your proposal is generally approved. Implement.  Let me expand on 4. \u0026amp; 5. When sharing an early draft, you\u0026rsquo;ll get a lot of feedback on the form, like a note you forgot to remove or requests to add visual material, expand on an idea, etc. If many people review it simultaneously at that stage, you\u0026rsquo;ll get a lot of similar comments. If readers perceive your RFC as a very \u0026ldquo;dirty\u0026rdquo; draft, they might not read it all (or at all). The idea is to refine these early on with a group of people that care a lot about the RFC, like your team or your manager. With those comments out of the way, you can expand the group of reviewers. The new round of comments should hopefully focus more on the content.\nWith regards to getting an RFC approved, it depends on the implicit or explicit agreements or policies within your organization. Some teams require sign-offs (e.g., reviewers mark the document as approved), while others may interpret the lack of outstanding feedback as approval. It\u0026rsquo;s all about communicating expectations effectively.\nClosing remarks Lastly, keeping an open mind is an essential part of the process. It\u0026rsquo;s a Request for Comments. You\u0026rsquo;re actively asking other people to review and critique your proposal. Some folks will like it a lot, while others might not. Even if the latter scenario doesn\u0026rsquo;t feel great, I\u0026rsquo;ve found that it\u0026rsquo;s usually the most helpful, assuming good faith and that no one\u0026rsquo;s gatekeeping anything (if you suspect that\u0026rsquo;s not the case, you might have a big culture problem on your hands!).\nIf someone isn\u0026rsquo;t convinced with your RFC, it could be that you haven\u0026rsquo;t considered all the alternatives. Sometimes, someone will reveal a major flaw in your RFC, causing its rejection. This might feel disheartening, but it\u0026rsquo;s actually a great outcome! That person saved you from wasting time pursuing an endeavor that wouldn\u0026rsquo;t have ended well. Go back to the drawing board, and try to get them involved so you can come up with an airtight solution.\n","permalink":"http://0x5d.github.io/posts/rfcs/","summary":"I\u0026rsquo;ll write the post I wish I\u0026rsquo;d read before I started writing RFCs at work. I\u0026rsquo;ll start by providing some motivation for RFCs, then go over my current process for writing them and provide a template that you can use.\nThis post isn\u0026rsquo;t by any means a formal specification for writing RFCs. If anything, it\u0026rsquo;s a loose framework I\u0026rsquo;ve found helpful over the past couple of years. I\u0026rsquo;m also writing this as a reference for myself in the future, but I hope it\u0026rsquo;ll be valuable for you too.","title":"On writing RFCs"}]